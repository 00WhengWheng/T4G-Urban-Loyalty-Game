# Multi-stage Production Dockerfile for React Client

# Stage 1: Build
FROM node:24-alpine AS builder

WORKDIR /app

# Install system dependencies for building and pnpm
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    && npm install -g pnpm

# Copy package files
COPY package.json ./
COPY pnpm-lock.yaml ./
COPY vite.config.ts ./
COPY tsconfig*.json ./
COPY tailwind.config.js ./
COPY postcss.config.js ./

# Install dependencies
RUN pnpm install --frozen-lockfile

# Copy source code
COPY . .

# Build the application
RUN pnpm run build

# Stage 2: Production with Nginx
FROM nginx:alpine AS production

# Install curl for health checks
RUN apk add --no-cache curl

# Copy custom Nginx configuration
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Copy built application from builder stage
COPY --from=builder /app/dist /usr/share/nginx/html

# Copy PWA files to root for proper service worker registration
COPY --from=builder /app/dist/*.js /usr/share/nginx/html/
COPY --from=builder /app/dist/*.json /usr/share/nginx/html/

# Create nginx user if not exists
RUN adduser -D -s /bin/sh nginx || true

# Change ownership
RUN chown -R nginx:nginx /usr/share/nginx/html
RUN chown -R nginx:nginx /var/cache/nginx
RUN chown -R nginx:nginx /var/log/nginx

# Make sure nginx can write to temp directories
RUN chmod -R 755 /usr/share/nginx/html

# Expose port
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD curl -f http://localhost:80 || exit 1

# Start Nginx
CMD ["nginx", "-g", "daemon off;"]