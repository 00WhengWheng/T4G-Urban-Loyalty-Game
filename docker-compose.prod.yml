version: '3.8'

services:
  # NestJS Backend (Production)
  server:
    image: ${SERVER_IMAGE:-ghcr.io/t4g-urban-loyalty-game-server:latest}
    container_name: t4g-server-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: ${DATABASE_URL}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DATABASE: ${POSTGRES_DATABASE}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      CORS_ORIGIN: ${CORS_ORIGIN}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      AWS_REGION: ${AWS_REGION}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      SENTRY_DSN: ${SENTRY_DSN}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "3001:3001"
    networks:
      - t4g-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.t4g-api.rule=Host(`api.t4g-game.com`)"
      - "traefik.http.routers.t4g-api.tls=true"
      - "traefik.http.routers.t4g-api.tls.certresolver=letsencrypt"
      - "traefik.http.services.t4g-api.loadbalancer.server.port=3001"

  # React Frontend (Production)
  client:
    image: ${CLIENT_IMAGE:-ghcr.io/t4g-urban-loyalty-game-client:latest}
    container_name: t4g-client-prod
    restart: unless-stopped
    environment:
      VITE_API_BASE_URL: ${VITE_API_BASE_URL}
      VITE_APP_NAME: ${VITE_APP_NAME}
    networks:
      - t4g-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.t4g-app.rule=Host(`t4g-game.com`) || Host(`www.t4g-game.com`)"
      - "traefik.http.routers.t4g-app.tls=true"
      - "traefik.http.routers.t4g-app.tls.certresolver=letsencrypt"
      - "traefik.http.services.t4g-app.loadbalancer.server.port=80"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: t4g-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - client_static:/usr/share/nginx/html
    networks:
      - t4g-network
    depends_on:
      - server
      - client

  # Traefik Load Balancer (Alternative to Nginx)
  traefik:
    image: traefik:v3.0
    container_name: t4g-traefik-prod
    restart: unless-stopped
    command:
      - "--api.dashboard=false"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=admin@t4g-game.com"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt
    networks:
      - t4g-network
    # Uncomment to use Traefik instead of Nginx
    # profiles:
    #   - traefik

volumes:
  client_static:
    driver: local
  traefik_letsencrypt:
    driver: local

networks:
  t4g-network:
    driver: bridge

# Production secrets (use Docker secrets in production)
secrets:
  jwt_secret:
    external: true
  database_url:
    external: true