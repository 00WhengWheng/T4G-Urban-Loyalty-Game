name: Performance Testing

on:
  schedule:
    - cron: '0 2 * * *' # Daily at 2 AM
  workflow_dispatch:
    inputs:
      target_environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      test_duration:
        description: 'Test duration (minutes)'
        required: false
        default: '5'
        type: string

env:
  NODE_VERSION: '18.x'

jobs:
  api-performance:
    name: 🚀 API Performance Testing
    runs-on: ubuntu-latest
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📥 Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: 🧪 Run API load tests
        run: |
          cd tests/performance
          k6 run --env TARGET_ENV=${{ github.event.inputs.target_environment || 'staging' }} \
                 --env DURATION=${{ github.event.inputs.test_duration || '5' }}m \
                 --env BASE_URL=${{ secrets.STAGING_URL }} \
                 api-load-test.js

      - name: 📊 Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: tests/performance/results/

  lighthouse-audit:
    name: 🏠 Frontend Performance Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📥 Install dependencies
        run: npm install -g @lhci/cli@0.12.x

      - name: 🏠 Run Lighthouse CI
        run: |
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          LHCI_SERVER_BASE_URL: ${{ secrets.STAGING_URL }}

      - name: 📊 Upload Lighthouse results
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: .lighthouseci/

  database-performance:
    name: 🗄️ Database Performance Testing
    runs-on: ubuntu-latest
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📥 Install dependencies
        run: |
          cd server
          npm install

      - name: 🗄️ Run database performance tests
        run: |
          cd tests/performance
          node database-performance.js
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}

      - name: 📊 Generate performance report
        run: |
          cd tests/performance
          node generate-report.js

      - name: 📤 Upload performance report
        uses: actions/upload-artifact@v4
        with:
          name: database-performance-report
          path: tests/performance/reports/

  notify-performance:
    name: 📢 Performance Results Notification
    runs-on: ubuntu-latest
    needs: [api-performance, lighthouse-audit, database-performance]
    if: always()
    
    steps:
      - name: 📢 Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#t4g-performance'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: |
            🚀 Performance testing completed for T4G
            Environment: ${{ github.event.inputs.target_environment || 'staging' }}
            API Tests: ${{ needs.api-performance.result }}
            Lighthouse Audit: ${{ needs.lighthouse-audit.result }}
            DB Performance: ${{ needs.database-performance.result }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
