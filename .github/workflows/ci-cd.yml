name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, staging]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '18.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ==============================================================================
  # CODE QUALITY & TESTING
  # ==============================================================================
  
  lint-and-test:
    name: 🔍 Lint & Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        workspace: [server, client]
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: 📥 Install dependencies
        run: |
          cd ${{ matrix.workspace }}
          pnpm install --frozen-lockfile

      - name: 🔍 Run linting
        run: |
          cd ${{ matrix.workspace }}
          pnpm run lint

      - name: 🧪 Run type checking (client only)
        if: matrix.workspace == 'client'
        run: |
          cd client
          pnpm run type-check

      - name: 🧪 Run tests
        run: |
          cd ${{ matrix.workspace }}
          pnpm run test

      - name: 📊 Upload coverage reports
        if: matrix.workspace == 'server'
        uses: codecov/codecov-action@v3
        with:
          file: ./server/coverage/lcov.info
          flags: backend
          name: backend-coverage

      - name: 📊 Upload coverage reports
        if: matrix.workspace == 'client'
        uses: codecov/codecov-action@v3
        with:
          file: ./client/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # ==============================================================================
  # SECURITY SCANNING
  # ==============================================================================
  
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: [lint-and-test]
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🔒 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 🔍 Dependency audit
        run: |
          cd server && pnpm audit --audit-level high
          cd ../client && pnpm audit --audit-level high

  # ==============================================================================
  # BUILD & CONTAINERIZE
  # ==============================================================================
  
  build:
    name: 🏗️ Build & Push Images
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging')
    
    strategy:
      matrix:
        service: [server, client]
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile.prod
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # ==============================================================================
  # DEPLOYMENT
  # ==============================================================================
  
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to staging
        uses: ./.github/actions/deploy
        with:
          environment: staging
          server-image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-server:develop
          client-image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-client:develop
          deploy-key: ${{ secrets.STAGING_DEPLOY_KEY }}
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}

  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to production
        uses: ./.github/actions/deploy
        with:
          environment: production
          server-image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-server:latest
          client-image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-client:latest
          deploy-key: ${{ secrets.PRODUCTION_DEPLOY_KEY }}
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}

      - name: 📊 Post-deployment health check
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 30
          curl -f ${{ secrets.PRODUCTION_URL }}/api/health || exit 1
          echo "✅ Production deployment successful!"

  # ==============================================================================
  # NOTIFICATION
  # ==============================================================================
  
  notify:
    name: 📢 Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: 📢 Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ needs.deploy-staging.result == 'success' && needs.deploy-production.result == 'success' && 'success' || 'failure' }}
          channel: '#t4g-deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        if: contains(github.event.head_commit.message, '[notify]') || github.ref == 'refs/heads/main'
