name: AWS ECS Deployment

on:
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types:
      - completed
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  AWS_REGION: eu-west-1
  ECR_REGISTRY: ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com

jobs:
  deploy-infrastructure:
    name: 🏗️ Deploy Infrastructure
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch'
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      cluster-name: ${{ steps.terraform.outputs.cluster-name }}
      
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🎯 Set environment
        id: set-env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi

      - name: ⚙️ Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
          terraform_wrapper: false

      - name: 🏗️ Terraform Init
        run: |
          cd infrastructure
          terraform init

      - name: 📋 Terraform Plan
        run: |
          cd infrastructure
          terraform plan -var-file="${{ steps.set-env.outputs.environment }}.tfvars" -out=tfplan

      - name: 🚀 Terraform Apply
        run: |
          cd infrastructure
          terraform apply -auto-approve tfplan

      - name: 📤 Export Terraform Outputs
        id: terraform
        run: |
          cd infrastructure
          echo "cluster-name=$(terraform output -raw ecs_cluster_name)" >> $GITHUB_OUTPUT
          echo "load-balancer-dns=$(terraform output -raw load_balancer_dns)" >> $GITHUB_OUTPUT

  deploy-services:
    name: 🚀 Deploy ECS Services
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure]
    environment: ${{ needs.deploy-infrastructure.outputs.environment }}
    
    strategy:
      matrix:
        service: [backend, frontend]
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: ⚙️ Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔐 Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: 🏷️ Generate image tags
        id: meta
        run: |
          ENVIRONMENT="${{ needs.deploy-infrastructure.outputs.environment }}"
          COMMIT_SHA="${{ github.sha }}"
          SHORT_SHA="${COMMIT_SHA:0:7}"
          
          echo "image-tag=${ENVIRONMENT}-${SHORT_SHA}" >> $GITHUB_OUTPUT
          echo "latest-tag=${ENVIRONMENT}-latest" >> $GITHUB_OUTPUT

      - name: 🏗️ Build and push Docker image
        run: |
          cd ${{ matrix.service }}
          
          # Build image
          docker build -f Dockerfile.prod -t ${{ env.ECR_REGISTRY }}/t4g-${{ matrix.service }}:${{ steps.meta.outputs.image-tag }} .
          docker tag ${{ env.ECR_REGISTRY }}/t4g-${{ matrix.service }}:${{ steps.meta.outputs.image-tag }} ${{ env.ECR_REGISTRY }}/t4g-${{ matrix.service }}:${{ steps.meta.outputs.latest-tag }}
          
          # Push image
          docker push ${{ env.ECR_REGISTRY }}/t4g-${{ matrix.service }}:${{ steps.meta.outputs.image-tag }}
          docker push ${{ env.ECR_REGISTRY }}/t4g-${{ matrix.service }}:${{ steps.meta.outputs.latest-tag }}

      - name: 🔄 Update ECS service
        run: |
          ENVIRONMENT="${{ needs.deploy-infrastructure.outputs.environment }}"
          CLUSTER_NAME="${{ needs.deploy-infrastructure.outputs.cluster-name }}"
          SERVICE_NAME="t4g-${ENVIRONMENT}-${{ matrix.service }}"
          
          # Get current task definition
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition "${SERVICE_NAME}" --query 'taskDefinition')
          
          # Update image in task definition
          NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "${{ env.ECR_REGISTRY }}/t4g-${{ matrix.service }}:${{ steps.meta.outputs.image-tag }}" '
            .containerDefinitions[0].image = $IMAGE |
            del(.taskDefinitionArn) |
            del(.revision) |
            del(.status) |
            del(.requiresAttributes) |
            del(.placementConstraints) |
            del(.compatibilities) |
            del(.registeredAt) |
            del(.registeredBy)
          ')
          
          # Register new task definition
          NEW_TASK_DEF_ARN=$(echo $NEW_TASK_DEFINITION | aws ecs register-task-definition --cli-input-json file:///dev/stdin --query 'taskDefinition.taskDefinitionArn' --output text)
          
          # Update service
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $SERVICE_NAME \
            --task-definition $NEW_TASK_DEF_ARN

      - name: ⏳ Wait for deployment
        run: |
          ENVIRONMENT="${{ needs.deploy-infrastructure.outputs.environment }}"
          CLUSTER_NAME="${{ needs.deploy-infrastructure.outputs.cluster-name }}"
          SERVICE_NAME="t4g-${ENVIRONMENT}-${{ matrix.service }}"
          
          echo "Waiting for service to stabilize..."
          aws ecs wait services-stable \
            --cluster $CLUSTER_NAME \
            --services $SERVICE_NAME \
            --cli-read-timeout 900 \
            --cli-connect-timeout 60

  verify-deployment:
    name: ✅ Verify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, deploy-services]
    
    steps:
      - name: ⚙️ Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔍 Get load balancer DNS
        id: lb-dns
        run: |
          cd infrastructure
          LB_DNS=$(terraform output -raw load_balancer_dns)
          echo "dns=$LB_DNS" >> $GITHUB_OUTPUT

      - name: 🏥 Health check
        run: |
          echo "Waiting for services to be ready..."
          sleep 60
          
          # Check API health
          curl -f "http://${{ steps.lb-dns.outputs.dns }}/api/health" || exit 1
          
          # Check frontend
          curl -f "http://${{ steps.lb-dns.outputs.dns }}/" || exit 1
          
          echo "✅ Deployment verification successful!"

      - name: 📢 Notify success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#t4g-deployments'
          text: |
            🚀 AWS ECS Deployment successful!
            Environment: ${{ needs.deploy-infrastructure.outputs.environment }}
            URL: http://${{ steps.lb-dns.outputs.dns }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: 📢 Notify failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#t4g-deployments'
          text: |
            ❌ AWS ECS Deployment failed!
            Environment: ${{ needs.deploy-infrastructure.outputs.environment }}
            Please check the logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
